{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;}
{\*\expandedcolortbl;;\cssrgb\c27059\c27059\c27059;}
\margl1440\margr1440\vieww22580\viewh17800\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b\fs24 \cf2 State 1:
\f1\b0 \
\
80112-41006867_1560647931_442683038_1186_0.java\
	correct\
\
144290-48115564_1846292451_50037485_650_1.java\
	correct \
\
113720-45077152_1718069623_623362484_1198_1.java\
	correct\
\
124033-45838177_1764142056_132130734_3381_0.java\
	correct \
\
142073-47929532_1848269062_65731493_546_1.java\
	correct \
\
116407-45196597_1722801702_93486358_1029_1.java\
	correct \
\
116066-45194984_1722731462_231316442_641_1.java\
	correct\
\
132561-46993020_1794071157_1595807_405_0.java\
	correct \
\
144694-48194983_1850086228_122851781_939_1.java\
	correct \
\
76527-40717790_1557927799_360904667_1226_1.java\
	correct\
\
114823-45127830_1720068148_315353289_951_0.java\
	correct \
\
99616-43474176_1656895934_257263606_987_1.java\
	correct\
\
116449-45196696_1722826163_160469992_1010_0.java\
	correct \
\
44770-39028791_1478059830_294982489_2119_0.java\
	correct
\f0\b \
\
State 2:\

\f1\b0 \
132658-46999963_1794180113_829147422_712_0.java\
	classified as state two because it had multiple ifs and elses that threw errors\
\
60060-39985532_1517894917_451846960_559_0.java\
	extra \'93if\'94 because of global variable boolean \'93loop\'94 being checked, does recursion and looping in one function based on boolean value, should probably be in state 8\
\
10924-36297374_1375391860_81121204_908_1.java\
	multiple factorial methods in one function labeled \'93factorial1\'94, \'93factorial2\'94, \'93factorial3\'94, also has a lost of type casting\
\
102082-43836296_1669357437_19447546_652_0.java\
	non-recursive method \'93factorial\'94 and\
	recursive method \'93recursive\'94 in same file\
\
10906-36296161_1357162975_52512941_517_1.java\
	factorial selector incorrect because a function can be written with out any brackets\
\
142563-47964494_1848268958_199070512_3735_1.java\
	else case returning -1 if the input is invalid\
\
\
\
\

\f0\b State 3:\

\f1\b0 \
118546-45389824_1730859149_279415255_422_0.java\
	how do we handle people creating new variables, that is not always incorrect\
\
98158-43198168_1645638036_120238612_254_0.java\
	if n > 0: recursion, else base case\
	sum is global variable -> no return in recursive case\
	\
134361-47144863_1799968634_910500447_794_1.java\
	.equals, .multiply, .subtract notation\
\
144051-48100568_1838089253_4802248_702_0.java\
	checks if n < 0 to throw error, no base case other than error being thrown\
\
124884-45953047_1753272182_846128575_775_0.java\
	check if n > 2 -> recursive call\
	else is base case \
\
110458-44611102_1699518084_2799011_3515_1.java\
	should be state 1 but uses \'93.compareto\'94 function\
\
144937-48217947_1843140961_19828836_1207_1.java\
	uses \'93BigInteger\'94\
\
136724-47392542_1813444125_327288581_2899_0.java\
	check for N > 2 to go into recursive case\
	else, base case\
\
139084-47674349_1820870354_254507238_575_1.java\
	relies on num and counter variables \
\
144285-48115564_1843129231_55542989_679_0.java\
	creates variables y and fact, fact stores factorial result, y is unused, checks recursive case first\
\
141691-47923058_1848033228_68667096_741_1.java\
138285-47595356_1817824497_496357185_5251_0.java\
136745-47392542_1828702595_202212341_3546_1.java\
143201-48006222_1862619013_63475153_1598_1.java\
\
\

\f0\b State 4:\

\f1\b0 \
51133-39475056_1497045958_268214966_1231_1.java\
	has a base-case, (if but no else, just return recursion), should be state 1 but is classified as state 4\
\
116703-45217342_1723624034_570276013_537_0.java\
	correctly classified! no base case\
\
133768-47095662_1798017078_668504588_1150_0.java\
	has basecase and recursive step- just no \'93else\'94\
\
121225-45638186_1740723205_726224540_1042_1.java\
	has base case and recursive step- just no \'93else\'94\
\
14055-36678069_1372082376_16324613_760_1.java\
	TERNARY OPERATOR\
	no \'93if\'94s and \'93else\'94s\
\
99801-43539410_1661709106_430165935_1216_0.java\
	base case, no else before recursive step\
\
23242-37713498_1528973010_81927477_1935_0.java\
	base case, no else before recursive step\
\
79921-40987925_1560233686_140096893_912_1.java\
	base case, no else before recursive step\
	\
23273-37713498_1531161336_37094354_2862_1.java\
137290-47466583_1812578327_403193624_1911_0.java\
17126-37015132_1386850230_257035732_2523_1.java\
57278-39786976_1509732872_491367192_1365_0.java\
121247-45638186_1740768563_726829392_758_1.java\
80252-41028724_1561480924_117835270_844_1.java\
10081-36129541_1350589248_267441617_508_1.java\
13368-36607479_1371737512_122383395_2759_0.java\
132876-47014888_1799011098_488510691_1722_1.java\
132995-47015053_1794737929_895563108_594_1.java\
\
\

\f0\b State Five:\

\f1\b0 \
74534-40593511_1543301316_767431641_750_0.java\
	factorial taking multiple arguments, n is being decremented\
\
3192-35287371_1321706760_13017352_1508_1.java\
	factorial taking multiple arguments\
\
126023-46057052_1757275319_713589876_311_1.java\
	factorial taking multiple arguments\
\
74303-40573475_1587326532_26536668_15027_0.java\
	factorial taking multiple arguments\
\
74544-40593511_1543332893_767509613_722_0.java\
	factorial taking multiple arguments\
\
74514-40593511_1543270451_767350152_573_0.java\
	factorial taking multiple arguments	\
\
3189-35287371_1321699320_12967465_1142_1.java\
	factorial taking multiple arguments	\
\
125089-45983599_1781700395_183142203_2183_0.java\
	factorial taking multiple arguments	\
\
139271-47701287_1825858772_18936034_652_1.java\
	factorial taking multiple arguments	\
\
74306-40573475_1587327243_26726705_15069_0.java\
	factorial taking multiple arguments	\
\
79340-40963347_1559981535_740979573_826_0.java\
	factorial taking multiple arguments	\
\
139242-47701060_1821715527_96659493_635_0.java\
	factorial taking multiple arguments	\
\
74512-40593511_1543158920_767327994_325_1.java\
	factorial taking multiple arguments	\
\
139265-47701287_1825848308_18522350_647_0.java\
	factorial taking multiple arguments	\
\
\

\f0\b State 6:
\f1\b0 \
7996-35831708_1346224201_45477915_1137_1.java\
	correct, uses for loop \
\
8177-35854577_1341189785_25873510_319_0.java\
	correct, uses for loop \
\
102303-43888381_1756284322_40075796_4225_0.java\
	correct, uses for loop \
\
89557-41976037_1613064420_441118661_3065_1.java\
	correct, uses while loop\
\
68236-40299259_1530868242_738016054_588_1.java\
	correct, uses for loop \
\
81653-41158115_1566548803_47301616_514_1.java\
	correct, uses while loop\
\
149152-48725969_1862684100_29202797_350_0.java\
	correct, uses for loop \
\
18391-37157615_1392906402_579734583_5735_0.java\
	correct, uses for loop \
\
131988-46878848_1814918224_69551144_6914_1.java\
	contains iterative and recursive factorial functions\
\
50059-39430247_1494002502_578226379_5224_0.java\
	correct, uses while loop\
\
8451-35910236_1342322313_23031093_289_1.java\
	correct, uses while loop\
	however, uses double for loops and adds solutions so kinda weird\
\
21727-37538078_1419043714_286292161_649_1.java\
	correct, uses while loop\
\
\
\

\f0\b State 7:
\f1\b0 \
116370-45196258_1747280225_119737393_2795_1.java\
	weird function, takes no arguments, does not use loops or recursion, probably should be state 9\
\
70202-40367601_1534748253_36238793_993_1.java\
	weird function, checks for numbers 1-6, uses formula n = n/((2*n)+1), should be in state 9\
\
108310-44495053_1694880491_471109976_558_0.java\
	calls function not defied in class, probably imported from another package, should probably be state 9\
\
40018-38716385_1462074684_264748975_1359_1.java\
	just calls Scanner In and no other code, should be state 9\
\
9085-36007373_1345981921_281195554_289_1.java\
	not fully implemented, should be state 9\
\
45460-39098285_1493580785_233942948_600_1.java\
	factorial testing, should be state 9\
\
86917-41691606_1588824153_793059138_399_0.java\
	incomplete implementation, should be state 9\
\
28607-37895774_1425700381_197072050_1111_0.java\
	defines unused variable then returns input, probably should be state 9\
\
145407-48276520_1845344485_83380268_526_1.java\
	factorial function declaration commented out, no implementation, should be state 9\
\
24986-37760343_1419783326_683261935_369_0.java\
	factorial not yet implemented, should be state 9\
\
145425-48276520_1845372743_85782876_459_0.java\
	factorial not yet implemented, should be state 9\
\

\f0\b State 8:
\f1\b0 \
	none\
\

\f0\b State 9:
\f1\b0 \
126319-46098883_1759025287_893389216_3576_1.java\
	function called recFactorial, should be in state 1\
\
57957-39825869_1510944501_238133121_998_0.java\
	factorial not actually defined, but used in comments\
\
120786-45611078_1742200368_523673019_2174_1.java\
	factorial not actually defined, but used in comments\
\
26309-37809520_1421835920_562569133_4389_1.java\
	calls \'93rest\'94 method in recursive implementation of factorial, state 9 is potentially the best state for this case\
\
42320-38868564_1472617897_441040046_6400_1.java\
	factorial function not defined explicitly, but a recursive solution is embedded in main in a weird way\
\
119819-45533629_1742050353_460211722_11981_1.java\
	should be in state one, factorial selector potentially grabbing wrong string based on the word \'93factorial\'94 in comments \
\
152731-49460882_1890004835_455277678_5271_1.java\
	in right state, but contains \'93iterativefactorial' and \'93recursiveFactorial\'94, neither of which are implemented\
\
61704-40054133_1529565997_349766921_5052_0.java\
	factorial test only, should not be picked up by factorial selector because there is no function declaration\
\
58328-39874628_1513065187_353261876_1071_0.java\
	factorial in comments only\
\
143352-48057294_1836376579_9784494_2178_1.java\
	function declaration of factorial commented out\
\
84930-41519807_1581505350_875961451_413_0.java\
	should be state 1, may be picking up class declaration rather than function declaration for factorial\
\
17227-37017181_1439816998_66994551_2680_1.java\
	long main function that included factorial implementation\
\
84151-41456661_1578621224_927338809_851_1.java\
	correct, factorial declared but not implemented\
\
62795-40110281_1535730190_387393155_5778_1.java\
	testing implementation, factorial function not defined here\
\
62135-40073783_1524979363_550939152_3475_1.java\
	testing implementation, factorial function not defined here\
\
58093-39847052_1531217475_119908790_11138_0.java\
	factorial functions commented out\
\
13597-36627774_1369877869_12971952_305_0.java\
	uses loop notation but with sysytem.out.println(a=1, 1<=num, a++) rather than for or while loop\
\
100892-43675846_1663322236_540912073_1432_1.java\
	uses for loop, facselect probably picking out \'93factorial\'94 from functions and causing an issue\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}